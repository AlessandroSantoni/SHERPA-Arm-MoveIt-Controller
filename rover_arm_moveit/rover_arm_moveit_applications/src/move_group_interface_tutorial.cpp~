#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>

#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

int main (int argc, char **argv)
{
    ros::init(argc, argv, "move_group_interface_tutorial");
    ros::NodeHandle node_handle;
    ros::AsyncSpinner spinner(1);
    spinner.start();

    //sleeping to load rviz
    sleep(20.0);

    //the move group interface allow me to control and plan only
    //for the desired group, in my case the group "arm" defined
    //in the moveit setup config files
    moveit::planning_interface::MoveGroup group("arm");

    //now the planning scene interface allows us to deal with the world
    //coordinates, objects..
    moveit::planning_interface::PlanningSceneInterface planning_scene_interface;

    //hereafter we create a publisher in order to display trajectories
    //on rviz. ======DO IT IN VREP LATER ON======
    ros::Publisher display_publisher = node_handle.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
    moveit_msgs::DisplayTrajectory display_trajectory;

    //printing out ref.frame for the robot and eef name
    ROS_INFO("Reference frame: %s", group.getPlanningFrame().c_str());
    ROS_INFO("Reference frame: %s", group.getEndEffectorLink().c_str());

    //==================================
    //=====Planning to a pose goal======
    //==================================
    //we plan now for a desired motion for the eef
    geometry_msgs::Pose target_pose1;
    //here i define the message
    target_pose1.orientation.w = 1.0;
    target_pose1.position.x = 0.28;
    target_pose1.position.y = -0.7;
    target_pose1.position.z = 1.0;
    //now i give this setpoint to my group object
    group.setPoseTarget(target_pose1);

    //let's call the planner to compute and visualize this plan
    moveit::planning_interface::MoveGroup::Plan my_plan; //giving the name my_plan
    bool success = group.plan(my_plan);

    ROS_INFO("Visualizing plan 1 (pose goal for the eef) %s", success? "":"FAILED");
    sleep(8.0); //give time to rviz to visu

    //let's now visualize again, group.plan() already does it
    //however it maybe useful for the visu on vrep
    //explivitly *******PUBLISHING THE PLAN********
    if(1)
    {
        ROS_INFO("Visualizing plan1 ===AGAIN===");
        //above we defined display_trajectory as a MESSAGE DisplayTrajectory from moveit
        display_trajectory.trajectory_start = my_plan.start_state_;
        display_trajectory.trajectory.push_back(my_plan.trajectory_);
        display_publisher.publish(display_trajectory);   //broadcasting that message
        //rviz displaying
        sleep(8.0);
    }

    //======================================================//
    /* Uncomment below line when working with a real robot*/
    /* group.move() */
    //======================================================//

    //skipping other planning types, for the moment

    ros::shutdown();
    return 0;
}
